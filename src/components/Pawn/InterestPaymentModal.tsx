import { useState, useEffect } from "react";

interface Props {
  isOpen: boolean;
  onClose: () => void;
  totalEvaluated: number;
  interestRate: number;
  interestPeriodMonths: number;
  previousRemainingAmount: number;
  onConfirm: (amountPaid: number, periodCountPaid: number) => void;
}

export default function InterestPaymentModal({
  isOpen,
  onClose,
  totalEvaluated,
  interestRate,
  interestPeriodMonths,
  previousRemainingAmount,
  onConfirm,
}: Props) {
  const [periodCountPaid, setPeriodCountPaid] = useState(1);
  const [amountPaid, setAmountPaid] = useState(0);
  const [expectedAmount, setExpectedAmount] = useState(0);
  const [remainingAmount, setRemainingAmount] = useState(0);
  const [hasCustomAmount, setHasCustomAmount] = useState(false);
  useEffect(() => {
    const baseInterest =
      (totalEvaluated * interestRate * periodCountPaid) / 100;
    const totalExpected = baseInterest + previousRemainingAmount;

    setExpectedAmount(totalExpected);

    if (!hasCustomAmount) {
      setAmountPaid(totalExpected);
    }

    setRemainingAmount(Math.max(totalExpected - amountPaid, 0));
  }, [
    totalEvaluated,
    interestRate,
    periodCountPaid,
    amountPaid,
    previousRemainingAmount,
    hasCustomAmount,
  ]);
  useEffect(() => {
    if (isOpen) {
      setPeriodCountPaid(1);
      setHasCustomAmount(false);
      setAmountPaid(0);
    }
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/40 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md space-y-4">
        <h2 className="text-xl font-semibold text-blue-700">
          ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
        </h2>

        <ul className="text-sm text-gray-700 space-y-1">
          <li>
            üìÜ ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢: <b>{periodCountPaid}</b> ‡∏á‡∏ß‡∏î (
            <b>{periodCountPaid * interestPeriodMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</b>)
          </li>
          <li>
            üßæ ‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô:{" "}
            <b>{previousRemainingAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</b>
          </li>
          <li>
            üí∞ ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:{" "}
            <b>{expectedAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</b>
          </li>
          <li>
            üßæ ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢:{" "}
            <b
              className={
                remainingAmount > 0 ? "text-red-600" : "text-green-600"
              }
            >
              {remainingAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó
            </b>
          </li>
        </ul>

        <div className="space-y-1">
          <label
            htmlFor="periodCount"
            className="text-sm font-medium text-gray-800 mt-2 block"
          >
            üìÜ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢
          </label>
          <input
            id="periodCount"
            type="number"
            min="1"
            value={periodCountPaid}
            onChange={(e) => setPeriodCountPaid(Number(e.target.value))}
            className="w-full border rounded px-3 py-2 text-right"
          />
          <label htmlFor="amount" className="text-sm font-medium text-gray-800">
            üí∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á (‡∏ö‡∏≤‡∏ó)
          </label>
          <input
            id="amount"
            type="number"
            min="0"
            value={amountPaid}
            onChange={(e) => {
              setAmountPaid(Number(e.target.value));
              setHasCustomAmount(true);
            }}
            className="w-full border rounded px-3 py-2 text-right"
          />
        </div>

        <div className="flex justify-end space-x-2 pt-4">
          <button
            onClick={onClose}
            className="px-4 py-2 rounded bg-gray-100 hover:bg-gray-200"
          >
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <button
            onClick={() => {
              if (amountPaid <= 0) {
                alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á");
                return;
              }
              if (
                confirm(
                  `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ${amountPaid.toLocaleString()} ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
                )
              ) {
                onConfirm(amountPaid, periodCountPaid);
              }
            }}
            className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
          >
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢
          </button>
        </div>
      </div>
    </div>
  );
}
